name: Python Building

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-jtc-adh-cmd-plus:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas tqdm --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import pandas --hidden-import os --hidden-import tqdm --strip jtc-adh-cmd-plus.py --distpath dist/${{ matrix.os }}

      - name: Upload-ubuntu-22.04
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-plus

      - name: Upload-windows-2019
        if: ${{ matrix.os == 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-plus.exe

  build-jtc-adh-cmd-plus2:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message      
        id: set_commit
        run: |
                if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then          
                echo "COMMIT_MESSAGE=$(git log --format=%s -1)" >> $GITHUB_ENV        
                elif [ "${{ matrix.os }}" == "windows-2019" ]; then
                commit_message=$(git log --format=%s -1)          
                echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV        
                fi      
        shell: bash      
        env:
         pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas ijson pandas --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import pandas --hidden-import os --hidden-import ijson --hidden-import json --strip jtc-adh-cmd-plus2.py --distpath dist/${{ matrix.os }}
      
      - name: Upload-ubuntu-22.04
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus2_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-plus2

      - name: Upload-windows-2019
        if: ${{ matrix.os == 'windows-2019' }}
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus2_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-plus2.exe

  build-jtc-adh-cmd-plus3:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas ijson pandas --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import pandas --hidden-import os --hidden-import ijson --hidden-import json --strip jtc-adh-cmd-plus3.py --distpath dist/${{ matrix.os }}
      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus3_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-plus3

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus3_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-plus3.exe

  build-jtc-adh-cmd-plus4:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas ijson pandas --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import pandas --hidden-import os --hidden-import ijson --hidden-import json --strip jtc-adh-cmd-plus4.py --distpath dist/${{ matrix.os }}
      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus4_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-plus4

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-plus4_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-plus4.exe

  build-jtc-adh-cmd-ultra-vaex:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse vaex pandas --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import pandas.pd --hidden-import vaex --hidden-import os --strip jtc-adh-cmd-ultra-vaex.py --distpath dist/${{ matrix.os }}
      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra-vaex_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-ultra-vaex

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra-vaex_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-ultra-vaex.exe

  build-jtc-adh-cmd-ultra-vaex2:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse vaex --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import argparse --hidden-import vaex --hidden-import os --strip jtc-adh-cmd-ultra-vaex2.py --distpath dist/${{ matrix.os }}
      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra-vaex2_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-ultra-vaex2

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra-vaex2_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-ultra-vaex2.exe


  build-jtc-adh-cmd-ultra:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas ijson --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile --hidden-import ijson --hidden-import json --hidden-import pandas --hidden-import argparse --hidden-import os --hidden-import itertools jtc-adh-cmd-ultra.py --distpath dist/

      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd-ultra

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd-ultra_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd-ultra.exe

  build-jtc-adh-cmd:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-22.04
          - build: windows
            os: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
          architecture: 'x64'

      - name: Set commit message
        id: set_commit
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-22.04" ]; then
            echo "COMMIT_MESSAGE=$(git log --format=%B -1)" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "windows-2019" ]; then
            commit_message=$(git log --format=%B -1)
            echo "COMMIT_MESSAGE=$commit_message" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.11/x64

      - name: Install dependencies
        run: |
          python -m pip install pyinstaller argparse pandas --ignore-installed

      - name: Build executable
        run: |
          pyinstaller --onefile  --hidden-import json --hidden-import pandas --hidden-import argparse --hidden-import os jtc-adh-cmd.py --distpath dist/

      
      - name: Upload-ubuntu-22.04
        if: always() && matrix.os == 'ubuntu-22.04'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/ubuntu-22.04/jtc-adh-cmd

      - name: Upload-windows-2019
        if: always() && matrix.os == 'windows-2019'
        uses: actions/upload-artifact@v3
        with:
          name: build_jtc-adh-cmd_${{ matrix.os }}_v${{ env.COMMIT_MESSAGE }}
          path: dist/windows-2019/jtc-adh-cmd.exe

 


 
