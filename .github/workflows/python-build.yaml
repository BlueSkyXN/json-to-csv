name: Python Building

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows2019:
    runs-on: windows-2019
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.4.4
    
    - name: Set up Python
      uses: actions/setup-python@v2.4.4
      with:
        python-version: '3.x' # Use the Python version you need to build your project
        architecture: 'x64'  # Use the architecture of your choice
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller # Install PyInstaller module
    
    # Replace these steps with the new steps generated by your Python script
    - name: Build executable (jtc-adh-cmd-plus.py)
      run: pyinstaller --onefile jtc-adh-cmd-plus.py
    - name: Build executable (jtc-adh-cmd-plus2.py)
      run: pyinstaller --onefile jtc-adh-cmd-plus2.py
    - name: Build executable (jtc-adh-cmd.py)
      run: pyinstaller --onefile jtc-adh-cmd.py
    - name: Build executable (jtc-adh-easy.py)
      run: pyinstaller --onefile jtc-adh-easy.py
    - name: Build executable (merge_csv.py)
      run: pyinstaller --onefile merge_csv.py
    - name: Build executable (scan-to-config.py)
      run: pyinstaller --onefile scan-to-config.py
    - name: Build executable (split_csv.py)
      run: pyinstaller --onefile split_csv.py
    - name: Build executable (split_json-adh.py)
      run: pyinstaller --onefile split_json-adh.py
    - name: Build executable (split_json.py)
      run: pyinstaller --onefile split_json.py
    - name: Build executable (split_txt.py)
      run: pyinstaller --onefile split_txt.py
    - name: Build executable (sub-adh.py)
      run: pyinstaller --onefile sub-adh.py

  build-ubuntu22:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.4
    
      - name: Set up Python
        uses: actions/setup-python@v2.4.4
        with:
          python-version: '3.x' # Use the Python version you need to build your project
          architecture: 'x64'  # Use the architecture of your choice
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller # Install PyInstaller module
      
      # Replace these steps with the new steps generated by your Python script
      - name: Build executable (jtc-adh-cmd-plus.py)
        run: pyinstaller --onefile jtc-adh-cmd-plus.py
      - name: Build executable (jtc-adh-cmd-plus2.py)
        run: pyinstaller --onefile jtc-adh-cmd-plus2.py
      - name: Build executable (jtc-adh-cmd.py)
        run: pyinstaller --onefile jtc-adh-cmd.py
      - name: Build executable (jtc-adh-easy.py)
        run: pyinstaller --onefile jtc-adh-easy.py
      - name: Build executable (merge_csv.py)
        run: pyinstaller --onefile merge_csv.py
      - name: Build executable (scan-to-config.py)
        run: pyinstaller --onefile scan-to-config.py
      - name: Build executable (split_csv.py)
        run: pyinstaller --onefile split_csv.py
      - name: Build executable (split_json-adh.py)
        run: pyinstaller --onefile split_json-adh.py
      - name: Build executable (split_json.py)
        run: pyinstaller --onefile split_json.py
      - name: Build executable (split_txt.py)
        run: pyinstaller --onefile split_txt.py
      - name: Build executable (sub-adh.py)
        run: pyinstaller --onefile sub-adh.py

    - name: Upload
      uses: actions/upload-artifact@v2.4.4
      with:
        name: build-out
        path: dist/*